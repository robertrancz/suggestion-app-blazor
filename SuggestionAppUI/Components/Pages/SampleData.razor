@page "/SampleData"
@rendermode InteractiveServer

@inject ICategoryData categoryData
@inject IStatusData statusData


<h3>Sample Data</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}


@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategoriesAsync();

        if (categories?.Count > 0) return;

        CategoryModel cat = new()
            {
                CategoryName = "Courses",
                CategoryDescription = "Full paid courses"
            };
        await categoryData.CreateCategoryAsync(cat);

        cat = new()
            {
                CategoryName = "Dev questions",
                CategoryDescription = "Advice on being a developer"
            };
        await categoryData.CreateCategoryAsync(cat);

        cat = new()
            {
                CategoryName = "In-depth Training",
                CategoryDescription = "Deep dive videos on various topics"
            };
        await categoryData.CreateCategoryAsync(cat);

        cat = new()
            {
                CategoryName = "10-Minute Training",
                CategoryDescription = "A quick \"How to?\" video"
            };
        await categoryData.CreateCategoryAsync(cat);

        cat = new()
            {
                CategoryName = "Other",
                CategoryDescription = "Not sure in which category this fits in"
            };
        await categoryData.CreateCategoryAsync(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatusesAsync();

        if (statuses?.Count > 0) return;

        StatusModel status = new()
            {
                StatusName = "Completed",
                StatusDescription = "The suggestion was accepted and the corresponding item was created."
            };
        await statusData.CreateStatusAsync(status);

        status = new()
            {
                StatusName = "Watching",
                StatusDescription = "The suggestion is interesting. We are watching to see how much interest will raise among members."
            };
        await statusData.CreateStatusAsync(status);

        status = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "The suggestion was accepted and it will be released soon."
            };
        await statusData.CreateStatusAsync(status);

        status = new()
            {
                StatusName = "Dismissed",
                StatusDescription = "The suggestion is not something we will undertake."
            };
        await statusData.CreateStatusAsync(status);

        statusesCreated = true;
    }
}
