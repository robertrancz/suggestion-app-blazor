@page "/"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider

<h1>Training Suggestions</h1>
<div>
    <button>Suggest</button>
</div>

<div>
    <div>@suggestions?.Count Suggestions</div>
    <div>
        <button @onclick="(() => OrderByNew(true))">New</button>
        <button @onclick="(() => OrderByNew(false))">Popular</button>
    </div>
    <div>
        <input type="text" placeholder="Search" aria-label="Search box" @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
</div>

<div>
    <div>
        @if(suggestions is not null)
        {
            // 'infinite' scrolling
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div>
                    <div @onclick="(() => VoteUp(s))">
                        <div>@GetUpvoteTopText(s)</div>
                        <span class="bi bi-caret-up-fill"></span>
                        <div>@GetUpvoteBottomText(s)</div>
                    </div>
                    <div>
                        <div @onclick="(() => OpenDetails(s))">@s.Suggestion</div>
                        <div>
                            <div @onclick="(() => OpenDetails(s))">@s.Category?.CategoryName</div>
                        </div>
                    </div>
                    <div>
                        <div>@s.SuggestionStatus?.StatusName</div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div>
        @if(categories is not null)
        {
            <div>
                <span>Category</span>
                <div @onclick="(() => OnCategoryClick())">All</div>
                @foreach(var c in categories)
                {
                    <div @onclick="(() => OnCategoryClick(c.CategoryName))">@c.CategoryName</div>
                }
            </div>
        }
        @if(statuses is not null)
        {
            <div>
                <span>Status</span>
                <div @onclick="(() => OnStatusClick())">All</div>
                @foreach (var s in statuses)
                {
                    <div @onclick="(() => OnStatusClick(s.StatusName))">@s.StatusName</div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<SuggestionModel> suggestions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;
    private UserModel loggedInUser;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    private bool isSortedByNew = true;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategoriesAsync();
        statuses = await statusData.GetAllStatusesAsync();
        await SyncAuthProviderUserToDatabase();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task SyncAuthProviderUserToDatabase()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string? objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if(!string.IsNullOrWhiteSpace(objectId))
        {
            loggedInUser = await userData.GetUserFromAuthenticationAsync(objectId) ?? new();

            string? firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string? lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string? displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string? email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            bool isDirty = false;

            if(!objectId.Equals(loggedInUser.ObjectIdentifier))
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;

            }
            if (firstName is not null && !firstName.Equals(loggedInUser.FirstName))
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if (lastName is not null && !lastName.Equals(loggedInUser.LastName))
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }
            if (displayName is not null && !displayName.Equals(loggedInUser.DisplayName))
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email is not null && !email.Equals(loggedInUser.EmailAddress))
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }

            if(isDirty)
            {
                if(string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUserAsync(loggedInUser);
                }
                else
                {
                    await userData.UpdateUserAsync(loggedInUser);
                }
            }
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestionsAsync();

        if(selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        if(selectedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        if(string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s =>
                s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if(isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                           .ThenByDescending(s => s.DateCreated).ToList();
        }

        suggestions = output;

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private async Task VoteUp(SuggestionModel suggestion)
    {
        if(loggedInUser is not null)
        {
            if(suggestion.Author.Id == loggedInUser.Id)
            {
                // Can't vote on your own suggestion
                return;
            }
            if(suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                // Already voted this suggestion, so remove previous vote.
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpvoteSuggestionAsync(suggestion.Id, loggedInUser.Id);

            if(!isSortedByNew)
            {
                // if sorted by popularity, we need to reorder because the vote might have influenced it
                suggestions = suggestions.OrderByDescending(s => s.UserVotes.Count)
                                         .ThenByDescending(s => s.DateCreated).ToList();
            }
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", forceLoad: true);
        }
    }

    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser?.Id) return "Awaiting";
            else return "Click To";
        }
    }

    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }
}

