@page "/"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider

<h1 class="page-heading text-uppercase mb-4">Training Suggestions</h1>
<div class="suggestion-container">
    <button @onclick="LoadCreatePage" class="suggest-btn btn btn-outline-light btn-lg text-uppercase">Suggest</button>
</div>

<div class="row">
    <div class="suggestions-count col-md-4 text-light mt-2">@suggestions?.Count Suggestions</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn btn-order @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">New</button>
        <button class="btn btn-order @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))">Popular</button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
        <input type="text" placeholder="Search" aria-label="Search box" @oninput="((txt) => OnSearchInput((string)txt.Value))"
               class="form-control rounded-control" />
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if(suggestions is not null)
        {
            // 'infinite' scrolling
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div class="suggestion-entry">
                    <div @onclick="(() => VoteUp(s))" class="@GetVoteClass(s)">
                        <div class="text-uppercase">@GetUpvoteTopText(s)</div>
                        <span class="bi bi-caret-up-fill entry-upvote"></span>
                        <div class="text-uppercase">@GetUpvoteBottomText(s)</div>
                    </div>
                    <div class="suggestion-entry-text">
                        <div @onclick="(() => OpenDetails(s))" class="suggestion-entry-text-title">@s.Suggestion</div>
                        @if(archivingSuggestion is null || archivingSuggestion.Id != s.Id)
                        {
                            <div class="suggestion-entry-bottom">
                                <div @onclick="(() => OpenDetails(s))" class="suggestion-entry-text-category">@s.Category?.CategoryName</div>
                                <AuthorizeView Policy="Admin">
                                    <button @onclick="(() => archivingSuggestion = s)" class="btn btn-archive suggestion-entry-text-category">Archive</button>
                                </AuthorizeView>
                            </div>
                        }
                        else
                        {
                            <div class="suggestion-entry-bottom">
                                <button class="btn btn-archive btn-archive-confirm" @onclick="ArchiveSuggestion">Confirm</button>
                                <button class="btn btn-archive btn-archive-reject" @onclick="(() => archivingSuggestion = null)">Cancel</button>
                            </div>
                        }
                    </div>
                    <div class="suggestion-entry-status @GetSuggestionStatusClass(s)">
                        <div class="suggestion-entry-status-text">@s.SuggestionStatus?.StatusName</div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3">
        @if(categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Category</span>
                <div @onclick="(() => OnCategoryClick())" class="@GetSelectedCategory()">All</div>
                @foreach(var c in categories)
                {
                    <div @onclick="(() => OnCategoryClick(c.CategoryName))" class="@GetSelectedCategory(c.CategoryName)">@c.CategoryName</div>
                }
            </div>
        }
        @if(statuses is not null)
        {
            <div class="statuses">
                <span class="text-uppercase fw-bold">Status</span>
                <div @onclick="(() => OnStatusClick())" class="@GetSelectedStatus()">All</div>
                @foreach (var s in statuses)
                {
                    <div @onclick="(() => OnStatusClick(s.StatusName))" class="@GetSelectedStatus(s.StatusName)">@s.StatusName</div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<SuggestionModel> suggestions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;
    private UserModel loggedInUser;
    private SuggestionModel archivingSuggestion;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    private bool isSortedByNew = true;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategoriesAsync();
        statuses = await statusData.GetAllStatusesAsync();
        await SyncAuthProviderUserToDatabase();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task ArchiveSuggestion()
    {
        archivingSuggestion.Archived = true;
        await suggestionData.UpdateSuggestionAsync(archivingSuggestion);
        suggestions.Remove(archivingSuggestion);
        archivingSuggestion = null;
        // await FilterSuggestions();
    }

    private void LoadCreatePage()
    {
        if(loggedInUser is not null)
        {
            navManager.NavigateTo("/Create");
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", forceLoad: true);
        }
    }

    private async Task SyncAuthProviderUserToDatabase()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string? objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if(!string.IsNullOrWhiteSpace(objectId))
        {
            loggedInUser = await userData.GetUserFromAuthenticationAsync(objectId) ?? new();

            string? firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string? lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string? displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string? email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            bool isDirty = false;

            if(!objectId.Equals(loggedInUser.ObjectIdentifier))
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;

            }
            if (firstName is not null && !firstName.Equals(loggedInUser.FirstName))
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if (lastName is not null && !lastName.Equals(loggedInUser.LastName))
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }
            if (displayName is not null && !displayName.Equals(loggedInUser.DisplayName))
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email is not null && !email.Equals(loggedInUser.EmailAddress))
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }

            if(isDirty)
            {
                if(string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUserAsync(loggedInUser);
                }
                else
                {
                    await userData.UpdateUserAsync(loggedInUser);
                }
            }
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestionsAsync();

        if(selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        if(selectedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        if(string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s =>
                s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if(isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                           .ThenByDescending(s => s.DateCreated).ToList();
        }

        suggestions = output;

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private async Task VoteUp(SuggestionModel suggestion)
    {
        if(loggedInUser is not null)
        {
            if(suggestion.Author.Id == loggedInUser.Id)
            {
                // Can't vote on your own suggestion
                return;
            }
            if(suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                // Already voted this suggestion, so remove previous vote.
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpvoteSuggestionAsync(suggestion.Id, loggedInUser.Id);

            if(!isSortedByNew)
            {
                // if sorted by popularity, we need to reorder because the vote might have influenced it
                suggestions = suggestions.OrderByDescending(s => s.UserVotes.Count)
                                         .ThenByDescending(s => s.DateCreated).ToList();
            }
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", forceLoad: true);
        }
    }

    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser?.Id) return "Awaiting";
            else return "Click To";
        }
    }

    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }

    ///Region CSS methods
    private string SortedByNewClass(bool isNew)
    {
        if(isNew == isSortedByNew)
        {
            return "sort-selected";
        }
        else
        {
            return "";
        }
    }

    private string GetVoteClass(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-entry-no-votes";
        }
        else if(suggestion.UserVotes.Contains(loggedInUser?.Id))
        {
            return "suggestion-entry-voted";
        }
        else
        {
            return "suggestion-entry-not-voted";
        }
    }

    private string GetSuggestionStatusClass(SuggestionModel suggestion)
    {
        if(suggestion is null || suggestion.SuggestionStatus is null)
        {
            return "suggestion-entry-status-none";
        }

        string output = suggestion.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggestion-entry-status-completed",
            "Watching" => "suggestion-entry-status-watching",
            "Upcoming" => "suggestion-entry-status-upcoming",
            "Dismissed" => "suggestion-entry-status-dismissed",
            _ => "suggestion-entry-status-none"
        };

        return output;
    }

    private string GetSelectedCategory(string category = "All")
    {
        if (category == selectedCategory)
            return "selected-category";
        else
            return "";
    }

    private string GetSelectedStatus(string status = "All")
    {
        if (status == selectedStatus)
            return "selected-status";
        else
            return "";
    }
}

