@page "/Profile"
@rendermode InteractiveServer

@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager

<h1>My Profile</h1>

<div>
    <div>
        <button @onclick="ClosePage" />
    </div>
</div>

<div>
    <h2>My Account</h2>
    <p>
        <a href="#">Edit My Profile</a>
    </p>
</div>

@if(approved?.Count > 0)
{
    <div>
        <h2>Approved Suggestions</h2>
        <p>These are your suggestions that are currently active.</p>

        @foreach (var s in approved)
        {
            <hr />
            <div>@s.Suggestion</div>
            <p>@s.DateCreated.ToString("MM.dd.yyyy")</p>
            <p>Total votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.Description</p>
            @if(s.SuggestionStatus is not null)
            {
                <div>@s.SuggestionStatus.StatusName</div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }
        }
    </div>
}

@if (archived?.Count > 0)
{
    <div>
        <h2>Archived Suggestions</h2>
        <p>These are your suggestions that were active but did not gain enough traction.</p>

        @foreach (var s in archived)
        {
            <hr />
            <div>@s.Suggestion</div>
            <p>@s.DateCreated.ToString("MM.dd.yyyy")</p>
            <p>Total votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.Description</p>
            @if (s.SuggestionStatus is not null)
            {
                <div>@s.SuggestionStatus.StatusName</div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }
        }
    </div>
}

@if (pending?.Count > 0)
{
    <div>
        <h2>Pending Suggestions</h2>
        <p>These are your suggestions that have not yet reviewed by the administrators.</p>

        @foreach (var s in pending)
        {
            <hr />
            <div>@s.Suggestion</div>
            <p>@s.DateCreated.ToString("MM.dd.yyyy")</p>
            <p>Total votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.Description</p>
            @if (s.SuggestionStatus is not null)
            {
                <div>@s.SuggestionStatus.StatusName</div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }
        }
    </div>
}

@if (rejected?.Count > 0)
{
    <div>
        <h2>Rejected Suggestions</h2>
        <p>These are your suggestions that were not deemed to be appropriate.</p>

        @foreach (var s in rejected)
        {
            <hr />
            <div>@s.Suggestion</div>
            <p>@s.DateCreated.ToString("MM.dd.yyyy")</p>
            <p>Total votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.Description</p>
            @if (s.SuggestionStatus is not null)
            {
                <div>@s.SuggestionStatus.StatusName</div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }
        }
    </div>
}

@code {
    private UserModel loggedInUser;
    private List<SuggestionModel> submissions;
    private List<SuggestionModel> approved;
    private List<SuggestionModel> archived;
    private List<SuggestionModel> pending;
    private List<SuggestionModel> rejected;

    protected override async Task OnInitializedAsync()
    {
        // TODO Replace with actual user lookup
        loggedInUser = await userData.GetUserFromAuthenticationAsync("abc-123");

        var result = await suggestionData.GetUserSuggestionsAsync(loggedInUser.Id);

        if(loggedInUser is not null && result is not null)
        {
            submissions = result.OrderByDescending(s => s.DateCreated).ToList();
            approved = submissions.Where(s => s.ApprovedForRelease && !s.Archived && !s.Rejected).ToList();
            archived = submissions.Where(s => s.Archived && !s.Rejected).ToList();
            pending = submissions.Where(s => !s.ApprovedForRelease && !s.Rejected).ToList();
            rejected = submissions.Where(s => s.Rejected).ToList();
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

}
